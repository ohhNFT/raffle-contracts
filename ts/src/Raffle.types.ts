/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export type Decimal = string;
export interface InstantiateMsg {
  creation_coins?: Coin[] | null;
  fee_addr?: string | null;
  max_ticket_number?: number | null;
  minimum_raffle_duration?: number | null;
  name: string;
  nois_proxy_addr: string;
  nois_proxy_coin: Coin;
  owner?: string | null;
  raffle_fee: Decimal;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  create_raffle: {
    assets: AssetInfo[];
    owner?: string | null;
    raffle_options: RaffleOptionsMsg;
    raffle_ticket_price: AssetInfo;
  };
} | {
  cancel_raffle: {
    raffle_id: number;
  };
} | {
  claim_raffle: {
    raffle_id: number;
  };
} | {
  update_config: {
    creation_coins?: Coin[] | null;
    fee_addr?: string | null;
    max_tickets_per_raffle?: number | null;
    minimum_raffle_duration?: number | null;
    name?: string | null;
    nois_proxy_addr?: string | null;
    nois_proxy_coin?: Coin | null;
    owner?: string | null;
    raffle_fee?: Decimal | null;
  };
} | {
  modify_raffle: {
    raffle_id: number;
    raffle_options: RaffleOptionsMsg;
    raffle_ticket_price?: AssetInfo | null;
  };
} | {
  buy_ticket: {
    on_behalf_of?: string | null;
    raffle_id: number;
    sent_assets: AssetInfo;
    ticket_count: number;
  };
} | {
  receive: Cw721ReceiveMsg;
} | {
  nois_receive: {
    callback: NoisCallback;
  };
} | {
  update_randomness: {
    raffle_id: number;
  };
} | {
  toggle_lock: {
    lock: boolean;
  };
};
export type AssetInfo = {
  cw721_coin: Cw721Coin;
} | {
  coin: Coin;
} | {
  sg721_token: Sg721Token;
};
export type GatingOptionsMsg = {
  cw721_coin: string;
} | {
  cw20: Cw20Coin;
} | {
  coin: Coin;
} | {
  sg721_token: string;
} | {
  dao_voting_power: {
    dao_address: string;
    min_voting_power: Uint128;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type Binary = string;
export type HexBinary = string;
export interface Cw721Coin {
  address: string;
  token_id: string;
}
export interface Sg721Token {
  address: string;
  token_id: string;
}
export interface RaffleOptionsMsg {
  comment?: string | null;
  gating_raffle: GatingOptionsMsg[];
  max_ticket_number?: number | null;
  max_ticket_per_address?: number | null;
  min_ticket_number?: number | null;
  one_winner_per_asset: boolean;
  raffle_duration?: number | null;
  raffle_preview?: number | null;
  raffle_start_timestamp?: Timestamp | null;
}
export interface Cw20Coin {
  address: string;
  amount: Uint128;
}
export interface Cw721ReceiveMsg {
  msg: Binary;
  sender: string;
  token_id: string;
}
export interface NoisCallback {
  job_id: string;
  published: Timestamp;
  randomness: HexBinary;
}
export type QueryMsg = {
  config: {};
} | {
  raffle_info: {
    raffle_id: number;
  };
} | {
  all_raffles: {
    filters?: QueryFilters | null;
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  all_tickets: {
    limit?: number | null;
    raffle_id: number;
    start_after?: number | null;
  };
} | {
  ticket_count: {
    owner: string;
    raffle_id: number;
  };
};
export interface QueryFilters {
  contains_token?: string | null;
  gated_rights_ticket_buyer?: string | null;
  owner?: string | null;
  states?: string[] | null;
  ticket_depositor?: string | null;
}
export type Addr = string;
export type GatingOptions = {
  cw721_coin: Addr;
} | {
  cw20: Cw20CoinVerified;
} | {
  coin: Coin;
} | {
  sg721_token: Addr;
} | {
  dao_voting_power: {
    dao_address: Addr;
    min_voting_power: Uint128;
  };
};
export type RaffleState = "created" | "started" | "closed" | "claimed" | "finished" | "cancelled";
export interface AllRafflesResponse {
  raffles: RaffleResponse[];
}
export interface RaffleResponse {
  raffle_id: number;
  raffle_info?: RaffleInfo | null;
  raffle_state: RaffleState;
}
export interface RaffleInfo {
  assets: AssetInfo[];
  is_cancelled: boolean;
  number_of_tickets: number;
  owner: Addr;
  raffle_options: RaffleOptions;
  raffle_ticket_price: AssetInfo;
  randomness?: HexBinary | null;
  winners: Addr[];
}
export interface RaffleOptions {
  comment?: string | null;
  gating_raffle: GatingOptions[];
  max_ticket_number?: number | null;
  max_ticket_per_address?: number | null;
  min_ticket_number?: number | null;
  one_winner_per_asset: boolean;
  raffle_duration: number;
  raffle_preview: number;
  raffle_start_timestamp: Timestamp;
}
export interface Cw20CoinVerified {
  address: Addr;
  amount: Uint128;
}
export type ArrayOfString = string[];
export interface ConfigResponse {
  creation_coins: Coin[];
  fee_addr: Addr;
  last_raffle_id: number;
  locks: Locks;
  minimum_raffle_duration: number;
  name: string;
  nois_proxy_addr: Addr;
  nois_proxy_coin: Coin;
  owner: Addr;
  raffle_fee: Decimal;
}
export interface Locks {
  lock: boolean;
  sudo_lock: boolean;
}
export type Uint32 = number;